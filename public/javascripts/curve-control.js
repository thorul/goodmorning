// Generated by CoffeeScript 1.9.2
(function() {
  var addMasterRoot, drawCurveTree, drawTree, logger, shuffle;

  module.controller("curveController", [
    '$scope', '$cookieStore', 'curveService', function($scope, $cookieStore, curveService) {
      var pwd, uname;
      uname = $cookieStore.get("sybase-username");
      pwd = $cookieStore.get("sybase-password");
      if (uname === null) {
        uname = "";
      }
      if (pwd === null) {
        pwd = "";
      }
      $scope.credentials = {
        sybase_username: uname,
        sybase_password: pwd
      };
      $scope.crjobs = {};
      $scope.curves = {};
      $scope.cronacle_env = "PRD";
      $scope.sybase_env = "PRD";
      $scope.days_ago = "2";
      $scope.busy = 0;
      $scope.dayOfWeek = "";
      $scope.analysis = [];
      return $scope.afterBankHoliday = false;
    }, console.log("Hello from the Coffee curve controller"), showSubTree(), $scope.showStats = function(jobName) {
      var s;
      console.log("Displaying stats for " + jobName);
      s = getJobStats(jobName);
      console.dir(s);
      if (s.length > 0) {
        return plotJobGraph(s, jobName);
      } else {
        return console.log("Empty stats.");
      }
    }, $scope.getCurves = function() {
      $scope.busy = 1;
      $cookieStore.put('sybase-username', $scope.credentials["sybase_username"]);
      $cookieStore.put('sybase-password', $scope.credentials["sybase_password"]);
      return curveService.getCurves($scope.credentials["sybase_username"], $scope.credentials["sybase_password"], $scope.sybase_env, function(curves) {
        $scope.busy = 0;
        $scope.curves = curves;
        return drawCurveTree(curves.curveHierarchy, 400, 1);
      });
    }, logger = function(severity, message) {
      $scope.analysis.push({
        sev: severity,
        msg: message
      });
      return console.log(severity + ": " + message);
    }, shuffle = function(myArray) {
      var currentIndex, randomIndex, temporaryValue;
      currentIndex = myArray.length;
      while (0 !== currentIndex) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        temporaryValue = myArray[currentIndex];
        myArray[currentIndex] = myArray[randomIndex];
        myArray[randomIndex] = temporaryValue;
      }
      return myArray;
    }, addMasterRoot = function(hierarchy) {
      var h, hasParent, j, k, len, rootNodes;
      h = hierarchy;
      hasParent = {};
      rootNodes = {};
      h.forEach(function(node) {
        return hasParent[node.childCurve] = true;
      });
      h.forEach(function(node) {
        if (!hasParent[node.parentCurve]) {
          return rootNodes[node.parentCurve] = true;
        }
      });
      for (j = 0, len = rootNodes.length; j < len; j++) {
        k = rootNodes[j];
        h.unshift({
          "parentCurve": "ROOT",
          "childCurve": k
        });
      }
      return h.unshift({
        "childCurve": "ROOT"
      });
    }, drawCurveTree = function(hierarchy, spacing, compressFactor) {
      var children, n, processNode, treeData;
      $("#hive-path").empty();
      addMasterRoot(hierarchy);
      children = hierarchy.reduce(function(map, node) {
        (map[node.parentCurve] || (map[node.parentCurve] = [])).push(node.childCurve);
        return map;
      }, {});
      treeData = [];
      n = {
        "nodeName": "ROOT"
      };
      treeData.push(n);
      processNode(n, 0);
      processNode = function(node, level) {
        if (level > 30) {
          return;
        }
        if (children[node.nodeName]) {
          return children[node.nodeName].forEach(function(kidName) {
            var newNode;
            newNode = {
              "nodeName": kidName
            };
            treeData.push(newNode);
            (node.children || (node.children = [])).push(newNode);
            return processNode(newNode, level + 1);
          });
        }
      };
      return drawTree(treeData, spacing, compressFactor);
    }, drawTree = function(treeData, spacing, compressFactor) {
      var click, collapse, counts, diagonal, height, i, margin, root, svg, tree, update, width;
      counts = {
        "Floor-Curve": 1,
        "IR-<Currency>-Government-Base-London": 31,
        "IR-<Currency>-Government-London": 31,
        "IR-<Currency>-Interbank-Base-London": 31,
        "IR-<Currency>-Interbank-Floor-London": 33,
        "IR-<Currency>-Interbank-London": 31,
        "IR-<Currency>-USD-CcySwap-Base-London": 24,
        "IR-<Currency>-USD-CcySwap-Int2-London": 24,
        "IR-<Currency>-USD-CcySwap-London": 24,
        "IR-<Region>-Corp-FlexAdd-London": 11,
        "IR-<Region>-Corp-FlexMult-London": 11,
        "IR-<Region>-Government-FlexAdd-London": 10,
        "IR-<Region>-Interbank-FlexAdd-London": 10,
        "IR-CcySwap-FlexMult-London": 1,
        "IR-World-Corp-FlexAdd-London": 1,
        "IR-World-Corp-FlexMult-London": 1,
        "IR-World-Government-FlexAdd-London": 1,
        "IR-World-Interbank-FlexAdd-London": 1
      };
      if (!spacing) {
        spacing = 400;
      }
      if (!compressFactor) {
        compressFactor = 1;
      }
      margin = {
        top: 50,
        right: 120,
        bottom: 20,
        left: 120
      };
      width = 3500 - margin.right - margin.left;
      height = 1500 - margin.top - margin.bottom;
      i = 0;
      tree = d3.layout.tree().size([height, width]);
      diagonal = d3.svg.diagonal().projection(function(d) {
        return [d.y, d.x];
      });
      svg = d3.select("#hive-path").append("svg").attr("width", width + margin.right + margin.left).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      root = treeData[0];
      update(root);
      collapse = function(d) {
        if (d.children) {
          d._children = d.children;
          d._children.forEach(collapse);
          return d.children = null;
        }
      };
      click = function(d) {
        logger("INFO", "Clicked on node");
        $("#hive-path").empty();
        svg = d3.select("#hive-path").append("svg").attr("width", width + margin.right + margin.left).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        if (d.children) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        return update(d);
      };
      return update = function(source) {
        var link, links, node, nodeEnter, nodes;
        nodes = tree.nodes(root).reverse();
        links = tree.links(nodes);
        nodes.forEach(function(d) {
          d.y = d.depth * spacing;
          return d.x = d.x * compressFactor;
        });
        node = svg.selectAll("g.node").data(nodes, function(d) {
          return d.id || (d.id = ++i);
        });
        ar(nodeEnter = node.enter().append("g")).attr("class", "node").on("click", click).attr("transform", function(d) {
          return "translate(" + d.y + "," + d.x + ")";
        });
        nodeEnter.append("circle").attr("r", 10).style("fill", function(d) {
          var ref;
          return (ref = d._children === null) != null ? ref : {
            "rgb(255,255,150)": "rgb(0,0,100)"
          };
        });
        nodeEnter.append("text").attr("x", function(d) {
          var l, ref;
          l = d.nodeName.length * 6;
          return (ref = d.children || d._children) != null ? ref : {
            0: 0
          };
        }).attr("dy", "-13px").attr("text-anchor", function(d) {
          var ref;
          return (ref = d.children || d._children) != null ? ref : {
            "end": "start"
          };
        }).text(function(d) {
          var ref;
          return d.nodeName + ((ref = typeof counts[d.nodeName] === "undefined") != null ? ref : {
            '': ' (' + counts[d.nodeName] + ')'
          });
        }).style("fill", "#004488");
        link = svg.selectAll("path.link").data(links, function(d) {
          return d.target.id;
        });
        return link.enter().insert("path", "g").attr("class", "link").attr("d", diagonal);
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=curve-control.js.map
